{"version":3,"sources":["webpack://to_do_list/./src/DOMcontroller.js","webpack://to_do_list/./src/index.js","webpack://to_do_list/./src/logicController.js","webpack://to_do_list/webpack/bootstrap","webpack://to_do_list/webpack/runtime/define property getters","webpack://to_do_list/webpack/runtime/hasOwnProperty shorthand","webpack://to_do_list/webpack/runtime/make namespace object","webpack://to_do_list/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAgD;;AAEhD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,KAAK,qEAA+B,CAAC;;AAE1D;AACA;AACA,uCAAuC,8DAAwB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,yDAAyD,EAAE;AAC3D,uDAAuD,EAAE;AACzD,yDAAyD,EAAE;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,2BAA2B,4EAAsC;AACjE;AACA;;AAEA;AACA;AACA,sBAAsB,KAAK,8DAAwB,4BAA4B;AAC/E;AACA;AACA,oCAAoC,8DAAwB;AAC5D,sDAAsD,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,gCAAgC,8DAAwB;;AAExD;AACA;AACA;AACA;AACA;AACA,qEAAqE,EAAE;AACvE;;AAEA;AACA,gBAAgB,8DAAwB;AACxC;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,aAAa;;;;AAIb;AACA;AACA;AACA,2DAA2D,EAAE;AAC7D;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,6DAA6D,EAAE;AAC/D;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA,gCAAgC,4EAAsC;AACtE,wCAAwC,8DAAwB;AAChE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,uEAAiC;AACzC;;;;AAIA;AACA;AACA;AACA,QAAQ,oEAA8B;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,gBAAgB,gEAA0B;AAC1C;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,4BAA4B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iEAA2B;AACvC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAA6B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU,4EAAsC;AACzD,YAAY,mEAA6B;AACzC,YAAY,uEAAiC;AAC7C;AACA;AACA;AACA,SAAS;AACT,YAAY,mEAA6B;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,YAAY,6DAAuB,CAAC,4EAAsC;AAC1E;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,4EAAsC;AACjE;AACA,QAAQ,gEAA0B;AAClC;AACA;;AAEA;AACA,2BAA2B,4EAAsC;AACjE,wBAAwB,yEAAmC;AAC3D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT,YAAY,mEAA6B;AACzC,YAAY,mEAA6B;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4EAAsC;AACjE,wBAAwB,yEAAmC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8DAAwB;AACvD;AACA;AACA,+BAA+B,8DAAwB;AACvD;AACA;AACA;AACA;;;;AAIA;AACA,2BAA2B,4EAAsC;AACjE;AACA,QAAQ,oEAA8B;AACtC;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,gEAA0B;AAClC,QAAQ,uEAAiC;AACzC,QAAQ,6DAAuB;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,CAAC;;AAED,iEAAe,aAAa,E;;;;;;;;;;;;;;;;ACxZgB;AACI;;;;AAIhD,6DAAuB,G;;;;;;;;;;;;;;;;;;ACLvB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA,gBAAgB;AAChB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;AAGD,iEAAe,eAAe,E;;;;;;UC3F9B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"main.js","sourcesContent":["import logicController from './logicController';\n\nconst DOMController = (() => {\n\n    //render projects, edit, and delete buttons for projects\n    const renderProjectArea = () => {\n        //grab div containing list of projects\n        let projList = document.getElementById('projectList');\n        //clear display before repopulating\n        clearDisplay(projList);\n        \n        let allProjectTitles = document.createDocumentFragment();\n        //render those project titles to the DOM\n        //adding event listeners as the divs are added\n        for(let i= 0; i < logicController.projects.length; i++) {\n\n            //create div for project and add event listeners\n            let projectTitle = document.createElement('div');\n            projectTitle.textContent = logicController.projects[i].title;\n            projectTitle.classList.add('project');\n            projectTitle.addEventListener('click', (e) => {\n                setCurrentProjectOnClick(e);\n                displayCurrentProjectTitle();\n                renderTasks(e);\n                renderAddTaskBtn();\n            });\n\n            //create edit button\n            let editButton = document.createElement('i');\n            editButton.setAttribute('class', 'far fa-edit');\n            editButton.classList.add('projectEditButton');\n            editButton.addEventListener('click', (e) => {\n                editProjectTitle(e);\n            })\n\n            //create delete button\n            let deleteButton = document.createElement('i');\n            deleteButton.setAttribute('class', 'fas fa-trash-alt');\n            deleteButton.addEventListener('click', (e) => {\n                deleteProject(e);\n            })\n\n            //add data-attributes so items can be tracked\n            projectTitle.setAttribute('data-projNum', `${i}`);\n            editButton.setAttribute('data-projNum', `${i}`);\n            deleteButton.setAttribute('data-projNum', `${i}`);\n\n            //append items to the document frag before appending to DOM\n            allProjectTitles.appendChild(projectTitle);\n            allProjectTitles.appendChild(editButton);\n            allProjectTitles.appendChild(deleteButton);\n        }\n        projList.appendChild(allProjectTitles);\n    }\n\n\n    const renderTasks = () => {\n        //grab tasklist div\n        let taskList = document.querySelector('#taskList');\n        //grab index of project \n        let projectIndex = logicController.getCurrentProjectIndex();\n        //clear previous task list before rendering new one\n        clearDisplay(taskList);\n        \n        //render current task titles (shown) and task details (hidden)\n        let tasksAndDeets = document.createDocumentFragment();\n        for(let i = 0; i < logicController.projects[projectIndex].tasks.length; i++) {\n            //title of tasks\n            let taskTitle = document.createElement('div');\n            taskTitle.textContent = logicController.projects[projectIndex].tasks[i].title;\n            taskTitle.setAttribute('data-taskNum', `${i}`);\n            taskTitle.classList.add('task');\n            taskTitle.addEventListener('click', (e) => {\n                //prevent children from inheriting the onclick event\n                if (e.currentTarget !== e.target) {\n                    return;\n                }\n                setCurrentTaskOnClick(e);\n                renderTaskDetails(e);\n            });\n\n            //create div for task notes\n            let notes = document.createElement('div');\n            notes.textContent = logicController.projects[projectIndex].tasks[i].notes;\n\n            //task completion slider\n            //add event listener to the nested checkbox to avoid multiple firings due to bubbling\n            let toggle = document.querySelector('.complete-switch');\n            let completionSlider = toggle.cloneNode(true);\n            let completionSliderCheckBox = completionSlider.firstElementChild;\n            completionSliderCheckBox.setAttribute('data-taskNum', `${i}`);\n            completionSlider.style.display = 'inline-block';\n            \n            //check if the task is complete and display the slide accordingly\n            if (logicController.projects[projectIndex].tasks[i].isComplete == true) {\n                completionSliderCheckBox.checked = true;\n            } else {\n                completionSliderCheckBox.checked = false;\n            }\n\n            completionSliderCheckBox.addEventListener('click', (e) => {\n                toggleTaskComplete(e);\n            });\n\n\n\n            //create div for edit button\n            let editTaskButton = document.createElement('i');\n            editTaskButton.setAttribute('class', 'far fa-edit');\n            editTaskButton.setAttribute('data-taskNum', `${i}`);\n            editTaskButton.addEventListener('click', (e) => {\n                setCurrentTaskOnClick(e);\n                editTaskModalOpen();\n            })\n\n            //create div for delete button\n            let deleteTaskButton = document.createElement('i');\n            deleteTaskButton.setAttribute('class', 'fas fa-trash-alt');\n            deleteTaskButton.setAttribute('data-taskNum', `${i}`);\n            deleteTaskButton.addEventListener('click', deleteTask);\n\n            //create wrapper for task details -\n            let taskDetails = document.createElement('div');\n            taskDetails.classList.add('taskDetails');\n            taskDetails.classList.add('hidden');\n            taskDetails.appendChild(notes);\n            \n\n            //add task title and info to DOM\n            taskTitle.appendChild(taskDetails);\n            tasksAndDeets.appendChild(completionSlider);\n            tasksAndDeets.appendChild(taskTitle);\n            tasksAndDeets.appendChild(editTaskButton);\n            tasksAndDeets.appendChild(deleteTaskButton);\n\n        }\n        taskList.appendChild(tasksAndDeets);\n        \n\n    }\n\n    //display title of project above task list\n    const displayCurrentProjectTitle = () => {\n         let projTitleDisplay = document.querySelector('#projTitle');\n         let currentProjIndex = logicController.getCurrentProjectIndex();\n         projTitleDisplay.textContent = logicController.projects[currentProjIndex].title;\n    }\n\n    const renderTaskDetails = (e) => {\n        let clickedTaskDeets = e.target.querySelector('.taskDetails');\n        clickedTaskDeets.classList.toggle('hidden');\n    }\n\n    //sets the current project for later retrieval of index\n    const setCurrentProjectOnClick = (e) => {\n        let projectIndex = e.target.getAttribute('data-projNum');\n        logicController.setCurrentProject(projectIndex);\n    }\n\n\n\n    //sets the current task for later retrieval of index\n    const setCurrentTaskOnClick = (e) => {\n        let taskIndex = e.target.getAttribute('data-taskNum');\n        logicController.setCurrentTask(taskIndex);\n    }\n\n    //creates the button for adding tasks\n    const renderAddTaskBtn = () => {\n        let taskArea = document.querySelector('#taskArea');\n        let addTaskBtn = document.createElement('button');\n        let addTaskModal = document.getElementById('addTaskModal');\n        addTaskBtn.textContent = '+';\n        addTaskBtn.setAttribute('id', 'addTaskBtn');\n        //add event listener for btn to open modal window on click\n        addTaskBtn.addEventListener('click', addTaskModalOpen);\n\n        if (document.querySelector('#addTaskBtn') != null) {\n            return\n        } else {\n            taskArea.appendChild(addTaskBtn);\n        }\n\n        \n    }\n\n    //unhides the dropdown for adding projects\n    const addProjectDropDownEventListener = () => {\n        let projDropDown = document.querySelector('.addProjMenu');\n        let addProjBtn = document.querySelector('.addProjBtn');\n        addProjBtn.addEventListener('click', () => {\n            projDropDown.classList.toggle('show');\n        })\n        \n    }\n\n    //adds new project\n    const addNewProjectEventListener = () => {\n        let addProjDropBtn = document.querySelector('#addProjDropDownBtn');\n        addProjDropBtn.addEventListener('click', () => {\n            let newProjTitle = document.querySelector(\"#proj-title-input\").value;\n            if(newProjTitle.length > 30) {\n                return\n            } else {\n                logicController.addProject(newProjTitle);\n                renderProjectArea();\n            }\n        })\n    }\n\n    //controls editing of new project title\n    //click makes the title editable and changes the icon to a checkmark\n    //clicking the checkmark adds the new project and updates the displayed project\n    const editProjectTitle = (e) => {\n        let projectIndex = e.target.getAttribute('data-ProjNum');\n        let editBtn = e.target;\n        let projectTitleToEdit = e.target.previousSibling;\n\n        //check if other projects are currently editable and disable editing if so\n        let projectEditBtns = [...document.querySelectorAll('.projectEditButton')];\n        for (let i = 0; i < projectEditBtns.length; i++) {\n            if(projectEditBtns[i].classList.contains('fa-check-square') && projectEditBtns[i] != editBtn) {\n                projectEditBtns[i].classList.remove('fa-check-square');\n                projectEditBtns[i].classList.add('fa-edit');\n                projectEditBtns[i].previousSibling.style.backgroundColor = 'white';\n                projectEditBtns[i].previousSibling.contentEditable = 'false';\n            }\n        }\n        //if project is currently editable, clicking the checkmark updates the title\n        if (projectTitleToEdit.contentEditable == 'true') {\n            editBtn.classList.remove('fa-check-square');\n            editBtn.classList.add('fa-edit');\n            projectTitleToEdit.contentEditable = 'false';\n            projectTitleToEdit.style.backgroundColor = 'white';\n            logicController.editProject(projectIndex, projectTitleToEdit.textContent);\n            renderProjectArea();\n            displayCurrentProjectTitle();\n        //otherwise --> make the title editable\n        } else {\n            editBtn.classList.remove('fa-edit');\n            editBtn.classList.add('fa-check-square');\n            projectTitleToEdit.contentEditable = 'true';\n            projectTitleToEdit.style.backgroundColor = '#87ceff';\n        }\n    }\n\n    \n\n    const deleteProject = (e) => {\n        //grab corresponding index of proj from data-attribute of trash button\n        //grab div for proper removal of DOM elements as projects are deleted\n        let projectIndex = e.target.getAttribute('data-projNum');\n        let projectTitles = document.querySelectorAll('.project');\n        let taskList = document.querySelector('#taskList');\n        let projTitleDisplay = document.querySelector('#projTitle');\n        //reset task list if no projects remain after deleting last one\n        if (projectTitles.length == 1) {\n            logicController.deleteProject(projectIndex);\n            renderProjectArea();\n            clearDisplay(taskList);\n            projTitleDisplay.textContent = \"Project Title\";\n            document.getElementById('addTaskBtn').outerHTML = '';\n            //if to-be-deleted project is the current active project,\n            //update the current project to first in the list and display\n        } else if (logicController.getCurrentProjectIndex() == projectIndex) {\n            logicController.deleteProject(projectIndex);\n            logicController.setCurrentProject(0);\n            renderProjectArea();\n            displayCurrentProjectTitle();\n            renderTasks();\n        } else {\n            logicController.deleteProject(projectIndex);\n            renderProjectArea();\n        }\n    }\n\n    const addTaskModalOpen = () => {\n        let addTaskModal = document.getElementById('addTaskModal');\n        addTaskModal.style.display = 'block';\n        //change modal window text to reflect add task mode\n        let addTaskTitle = document.getElementById('add-task-title');\n        addTaskTitle.textContent = 'Title of New Task';\n        let addTaskNotes = document.getElementById('add-task-notes');\n        addTaskNotes.textContent = 'Notes';\n        let addTaskModalBtn = document.getElementById('addTaskModalBtn');\n        addTaskModalBtn.textContent = \"Add Task\";\n\n        addTaskModalBtn.removeEventListener('click', editTask);\n        addTaskModalBtn.addEventListener('click', addTask);\n\n        addTaskModalClose();\n    }\n\n\n    //closes the task addition window if you click outside it\n    const addTaskModalClose = () => {\n        window.onclick = (e) => {\n            let addTaskModal = document.getElementById('addTaskModal');\n            if (e.target == addTaskModal) {\n                addTaskModal.style.display = 'none';\n            }\n        }\n    }\n\n    const addTask = () => {\n        let addTaskModal = document.getElementById('addTaskModal');\n        let taskTitleInput = document.getElementById('task-title-input').value;\n        let taskNotesInput = document.getElementById('task-notes-input').value;\n        if (taskTitleInput.length < 1) {\n            alert('Sure about that title?')\n        } else if (taskNotesInput < 1) {\n            alert('Sure about those notes?');\n        } else {\n            addTaskModal.style.display = 'none';\n            logicController.addTask(logicController.getCurrentProjectIndex(), taskTitleInput, taskNotesInput, false);\n            renderTasks();\n        }\n    }\n\n    \n    const addTaskEventListener = () => {\n        let addTaskModalBtn = document.getElementById('addTaskModalBtn');\n        addTaskModalBtn.addEventListener('click', addTask);\n    }\n\n    const deleteTask = (e) => {\n        let projectIndex = logicController.getCurrentProjectIndex();\n        let taskIndex = e.target.getAttribute('data-taskNum');\n        logicController.deleteTask(projectIndex, taskIndex);\n        renderTasks();\n    }\n\n    const editTask = () => {\n        let projectIndex = logicController.getCurrentProjectIndex();\n        let taskIndex = logicController.getCurrentTaskIndex();\n        let editedTitle = document.getElementById('task-title-input').value;\n        let editedNotes = document.getElementById('task-notes-input').value;\n        if (editedTitle.length < 1) {\n            alert('Sure about your new title?');\n        } else if (editedNotes.length < 1) {\n            alert('Sure about your new notes?');\n        } else {\n            logicController.editTaskTitle(projectIndex, taskIndex, editedTitle);\n            logicController.editTaskNotes(projectIndex, taskIndex, editedNotes);\n            addTaskModal.style.display = 'none';\n            renderTasks();\n        }\n    }\n    \n    //change the modal window for adding tasks into one for editing tasks\n    const editTaskModalOpen = () => {\n        let addTaskModal = document.getElementById('addTaskModal');\n        addTaskModal.style.display = 'block';\n        //grab current indices\n        let projectIndex = logicController.getCurrentProjectIndex();\n        let taskIndex = logicController.getCurrentTaskIndex();\n        //change text of modal window to reflect editing mode\n        let editTaskTitle = document.getElementById('add-task-title');\n        editTaskTitle.textContent = 'Edit Title';\n        let editTaskNotes = document.getElementById('add-task-notes');\n        editTaskNotes.textContent = 'Edit Notes';\n        let editTaskModalBtn = document.getElementById('addTaskModalBtn');\n        editTaskModalBtn.textContent = \"Edit Task\";\n        //display current title for editing\n        let editTitleInput = document.getElementById('task-title-input');\n        editTitleInput.value = logicController.projects[projectIndex].tasks[taskIndex].title;\n        //display current notes for editing\n        let editNotesInput = document.getElementById('task-notes-input');\n        editNotesInput.value = logicController.projects[projectIndex].tasks[taskIndex].notes;\n        //remove add task event listener and replace with edit task event listener\n        editTaskModalBtn.removeEventListener('click', addTask);\n        editTaskModalBtn.addEventListener('click', editTask);\n    }\n\n    \n\n    const toggleTaskComplete = (e) => {\n        let projectIndex = logicController.getCurrentProjectIndex();\n        let taskIndex = e.target.getAttribute('data-taskNum');\n        logicController.toggleComplete(projectIndex, taskIndex);\n    }\n\n\n    const clearDisplay = (parent) => {\n        while (parent.firstChild) {\n            parent.removeChild(parent.firstChild)\n        }\n    }\n\n    const setTutorialProject = () => {\n        logicController.addProject('Example Project');\n        logicController.setCurrentProject(0);\n        logicController.addTask(0, 'Example Task: Click me!', 'Use the edit and delete buttons to update your tasks');\n    }\n    \n    const renderDOM = () => {\n        setTutorialProject();\n        renderProjectArea();\n        addProjectDropDownEventListener();\n        addNewProjectEventListener();\n    }\n\n    return {\n        renderDOM\n    }\n\n})();\n\nexport default DOMController;","import DOMController from './DOMcontroller';\nimport logicController from './logicController';\n\n\n\nDOMController.renderDOM();","const logicController = (() => {\n\n    let currentProject = null;\n    let currentTask = null;\n\n    let projects = [];\n\n    const projectFactory = (title) => {\n        let tasks = [];\n        return {title, tasks};\n    }\n\n    const taskFactory = (title, notes, isComplete) => {\n        return {title, notes, isComplete};\n    }\n\n    const addProject = (title) => {\n        projects.push(projectFactory(title));\n\n    }\n\n    const editProject = (projectIndex, title) => {\n        projects[projectIndex].title = title;\n    }\n\n    const deleteProject = (projectIndex) => {\n        projects.splice(projectIndex, 1);\n    }\n\n\n    const setCurrentProject = (index) => {\n        currentProject = projects[index];\n    }\n\n    const getCurrentProjectIndex = () => {\n        return projects.indexOf(currentProject);\n    }\n\n    const setCurrentTask = (index) => {\n        currentTask = currentProject.tasks[index];\n    }\n\n    const getCurrentTaskIndex = () => {\n        return currentProject.tasks.indexOf(currentTask);\n    }\n\n\n    const addTask = (projectIndex, title, notes, isComplete) => {\n        projects[projectIndex].tasks.push(taskFactory(title, notes, isComplete));\n    }\n\n    const editTaskTitle = (projectIndex, taskIndex, title) => {\n        projects[projectIndex].tasks[taskIndex].title = title;\n    }\n\n    const deleteTask = (projectIndex, taskIndex) => {\n        projects[projectIndex].tasks.splice(taskIndex, 1);\n    }\n\n\n    const editTaskNotes = (projectIndex, taskIndex, notes) => {\n        projects[projectIndex].tasks[taskIndex].notes = notes;\n    }\n\n    const toggleComplete = (projectIndex, taskIndex) => {\n        if (projects[projectIndex].tasks[taskIndex].isComplete == false) {\n            projects[projectIndex].tasks[taskIndex].isComplete = true;\n        } else {\n            projects[projectIndex].tasks[taskIndex].isComplete = false;\n        }\n    }\n\n    return {\n        projects,\n        setCurrentProject,\n        getCurrentProjectIndex,\n        setCurrentTask,\n        getCurrentTaskIndex,\n        addProject,\n        editProject,\n        deleteProject,\n        addTask,\n        editTaskTitle,\n        deleteTask,\n        editTaskNotes,\n        toggleComplete,\n    }\n\n})();\n\n\nexport default logicController;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/index.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}